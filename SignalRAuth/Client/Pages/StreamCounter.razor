@page "/streamcounter"
@using SignalRAuth.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider

<button @onclick="Send">Send Message</button>

<div>
    @foreach (var message in messages)
    {
        <div>
            <span class="username">@message</span>
        </div>
    }
</div>

@code {
    
    private readonly List<int> messages = new();
    
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            Console.WriteLine("[StreamCounter.OnInitializedAsync] Authenticated hub connection initialised.");
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chat"), 
                    options => { options.AccessTokenProvider = () => Task.FromResult(token?.Value); })
                .Build();
        }
        
        else
        {
            Console.WriteLine("[StreamCounter.OnInitializedAsync] Non authenticated hub connection initialised.");
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chat"))
                .Build();
        }

        //hubConnection.On<int>("ReceiveCount", ReceiveCount);
        
        await hubConnection.StartAsync();
        await base.OnInitializedAsync();
    }

    private async Task Send()
    {
        Console.WriteLine($"[StreamCounter.Send] Sending message...");

        var streamResult = hubConnection.StreamAsync<int>("StreamCount");
        await foreach (var item in streamResult.WithCancellation(new CancellationToken()))
        {
            Console.WriteLine($"[StreamCounter.Send] Received message: {item}");
            ReceiveCount(item);
        }
    }
    
    private void ReceiveCount(int count)
    {
        messages.Add(count);
        StateHasChanged();
    }

}